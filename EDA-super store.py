#!/usr/bin/env python
# coding: utf-8

# In[1]:


import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import time
import matplotlib.ticker as ticker


# In[2]:


df = pd.read_csv('D:\super store.csv')


# In[3]:


df.head()


# In[4]:


df.describe()


# In[5]:


#Dropping the Row ID column
df.drop('Row ID',axis = 1,inplace = True)
#convert order dates to pandas datetime format
df['Order Date'] = pd.to_datetime(df['Order Date'], format='%d/%m/%Y')
#covert shipping dates to pandas datetime format
df['Ship Date'] = pd.to_datetime(df['Ship Date'], format='%d/%m/%Y')


# In[6]:


df.sort_values(by=['Order Date'], inplace=True, ascending=True)


# In[7]:


#setting the index to be the date wil help us a lot later on
df.set_index("Order Date", inplace=True)


# In[8]:


print(df.isnull().sum())


# In[9]:


df[df['Postal Code'].isnull()]


# In[10]:


#postal code for burlington city
df['Postal Code'] = df['Postal Code'].fillna(5401)


# In[11]:


print(df.isnull().sum())


# In[12]:


#sort the customers as per the sales
Top_customers = df.groupby(["Customer Name"]).sum().sort_values("Sales",ascending=False).head(20)

# Round off the sales value up to 2decimal places
Top_customers = Top_customers[["Sales"]].round(2)

#since we have used group by, we will have to reset the index to add the customer name into dataframe
Top_customers.reset_index(inplace=True)


# In[13]:


#width and height of figure is defined in inches
plt.figure(figsize = (15,5))
plt.title("Most Valuable Customers(2015-2019)", fontsize=18)
plt.bar(Top_customers["Customer Name"], Top_customers["Sales"],color= '#99ff99',edgecolor='green', linewidth = 1)
plt.xlabel("Customers",fontsize=15)
plt.ylabel("Revenue",fontsize=15)
plt.xticks(fontsize=12, rotation=90)
plt.yticks(fontsize=12)
for k,v in Top_customers["Sales"].items():
    plt.text(k,v-8000,'$'+ str(v), fontsize=12,rotation=90,color='k',horizontalalignment='center');


# In[14]:


Top_states = df.groupby(["State"]).sum().sort_values("Sales",ascending=False).head(20)
Top_states = Top_states[["Sales"]].round(2)
Top_states.reset_index(inplace=True)


# In[15]:


plt.figure(figsize = (15,5)) # width and height of figure is defined in inches
plt.title("States which generated Highest Revenue (2015-2019)", fontsize=18) 
plt.bar(Top_states["State"], Top_states["Sales"],color= '#FF6F61',edgecolor='Red', linewidth = 1)
plt.xlabel("States",fontsize=15) # x axis shows the States
plt.ylabel("Revenue",fontsize=15) # y axis shows the Revenue
plt.xticks(fontsize=12, rotation=90)
plt.yticks(fontsize=12)
for k,v in Top_states["Sales"].items(): #To show the exact revenue generated on the figure
    if v>400000:
        plt.text(k,v-150000,'$'+ str(v), fontsize=12,rotation=90,color='k', horizontalalignment='center');


# In[16]:


Top_cities = df.groupby(["City"]).sum().sort_values("Sales", ascending=False).head(20) # Sort the States as per the sales
Top_cities = Top_cities[["Sales"]].round(2) # Round off the Sales Value up to 2 decimal places
Top_cities.reset_index(inplace=True) # Since we have used groupby, we will have to reset the index to add the cities into the dataframe


# In[17]:


plt.figure(figsize = (15,5)) # width and height of figure is defined in inches
plt.title("Cities which generated Highest Revenue (2015-2019)", fontsize=18)
plt.bar(Top_cities["City"], Top_cities["Sales"],color= '#95DEE3',edgecolor='blue', linewidth = 1)
plt.xlabel("Cities",fontsize=15)  # x axis shows the States
plt.ylabel("Revenue",fontsize=15)  # y axis shows the Revenue
plt.xticks(fontsize=12, rotation=90)
plt.yticks(fontsize=12)
for k,v in Top_cities["Sales"].items(): #To show the exact revenue generated on the figure
    if v>250000:
        plt.text(k,v-75000,'$'+ str(v), fontsize=12,rotation=90,color='k', horizontalalignment='center');
    else:
        plt.text(k,v+15000,'$'+ str(v), fontsize=12,rotation=90,color='k', horizontalalignment='center');


# In[18]:


Top_category = df.groupby(["Category"]).sum().sort_values("Sales",ascending=False)
Top_category = Top_category[["Sales"]]
total_revenue_category = Top_category["Sales"].sum()
total_revenue_category = str(int(total_revenue_category))
total_revenue_category = '$' + total_revenue_category
Top_category.reset_index(inplace=True)


# In[19]:


# width and height of figure is defined in inches
plt.rcParams["figure.figsize"] = (13,5)
#font size is defined
plt.rcParams['font.size'] = 12.0
 # Font weight is defined
# we don't want to look at the percentage distribution in the pie chart. Instead, we want to look at the exact revenue generated by the categories.
plt.rcParams['font.weight'] = 6
def autopct_format(values):
    def my_format(pct):
        total = sum(values)
        val = int(round(pct*total/100.0))
        return '${v:d}'.format(v=val)
    return my_format
colors = ['#BC243C','#FE840E','#C62168']
# Colors are defined for the pie chart
explode = (0.05,0.05,0.05)
fig1, ax1 = plt.subplots()
ax1.pie(Top_category['Sales'],colors = colors, labels=Top_category['Category'], autopct= autopct_format(Top_category['Sales']), startangle=90,explode=explode)
centre_circle = plt.Circle((0,0),0.82,fc='white')
 # drawing a circle on the pie chart to make it look better 
fig = plt.gcf()
fig.gca().add_artist(centre_circle)
# Add the circle on the pie chart
# Equal aspect ratio ensures that pie is drawn as a circle
ax1.axis('equal')
label = ax1.annotate('Total Revenue \n'+str(total_revenue_category),color = 'red', xy=(0, 0), fontsize=12, ha="center")
plt.tight_layout()
plt.show()


# In[20]:


Top_products = df.groupby(["Product Name"]).sum().sort_values("Sales",ascending=False).head(8)
# Sort the product names as per the sales
Top_products = Top_products[["Sales"]].round(2)
# Round off the Sales Value up to 2 decimal places
Top_products.reset_index(inplace=True)
# Since we have used groupby, we will have to reset the index to add the product names into the dataframe
total_revenue_products = Top_products["Sales"].sum()
# To find the total revenue generated by all the top products
total_revenue_products = str(int(total_revenue_products))
# Convert the total_revenue_products from float to int and then to string
total_revenue_products = '$' + total_revenue_products
# Adding '$' sign before the Value


# In[ ]:




